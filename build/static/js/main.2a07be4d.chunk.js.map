{"version":3,"sources":["Database/Db.ts","Context/EventContext.tsx","EventModal/EventModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataStore","require","EventContext","createContext","db","createEvent","event","Promise","resolve","reject","insert","err","docs","editEvent","id","update","_id","getEvent","find","deleteEvent","remove","numRemoved","this","filename","autoload","EventProvider","props","defaultDate","Date","toISOString","substring","useState","show","setShow","date","setDate","note","setNote","setId","events","setEvent","getEvents","then","allEvents","map","item","title","start","end","handleClose","useEffect","Provider","value","onShow","onClose","onDatePick","target","onNoteSet","onEventSave","result","push","index","findIndex","x","onEdit","onDelete","children","EventModal","context","useContext","Modal","onHide","Header","closeButton","Title","Body","Form","Group","Label","FormControl","type","onChange","as","Footer","Button","variant","className","onClick","App","defaultView","header","center","plugins","interactionPlugin","listPlugin","selectable","customButtons","addEventButton","text","click","dateClick","info","alert","dateStr","eventClick","data","handleEditModal","eventColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a07be4d.chunk.js","sourcesContent":["import { IEventDb } from '../Context/Types';\r\nconst DataStore = require('nedb');\r\n\r\nexport default class Db {\r\n    db : any;\r\n    constructor() {\r\n        this.db = new DataStore({ filename: 'C:/temp/event.db', autoload: true});\r\n    }\r\n\r\n    createEvent = (event: any) => {\r\n        return new Promise<IEventDb>((resolve, reject) => {\r\n            this.db.insert(event, function(err, docs) {\r\n                if (docs) {\r\n                    resolve(docs);\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n       });\r\n    }\r\n\r\n    editEvent = (id: string, event: any) => {\r\n        return new Promise<IEventDb>((resolve, reject) => {\r\n            this.db.update({ _id: id }, event, function(err, docs) {\r\n                if (docs) {\r\n                    resolve(docs);\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    getEvent = () => {\r\n       return new Promise((resolve, reject) => {\r\n            this.db.find({}, function(err, docs) {\r\n                if (docs) {\r\n                    resolve(docs);\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n       });\r\n    }\r\n\r\n    deleteEvent = (id : string) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.db.remove({ _id: id }, function(err, numRemoved) {\r\n                if (numRemoved) {\r\n                    resolve();\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import React, { useState, createContext, useEffect } from \"react\";\r\nimport Db from '../Database/Db';\r\nimport { IEventDb } from './Types';\r\n\r\ninterface IContextProps {\r\n    show: boolean,\r\n    date: string,\r\n    note: string,\r\n    events: Array<IEvent>,\r\n    onShow: () => void,\r\n    onClose: () => void,\r\n    onDatePick: (event : any) => void,\r\n    onNoteSet: (event : any) => void,\r\n    onEventSave: (id: string | null) => void,\r\n    onEdit: (event : IEvent) => void,\r\n    onDelete: () => void,\r\n}\r\n\r\nexport interface IEvent {\r\n    id: string,\r\n    start: string,\r\n    end: string,\r\n    title: string,\r\n}\r\n\r\nexport const EventContext = createContext({} as IContextProps);\r\n\r\nconst db = new Db();\r\nexport function EventProvider(props: any) {\r\n    let defaultDate = new Date().toISOString().substring(0, 10);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [date, setDate] = useState(defaultDate);\r\n    const [note, setNote] = useState(\"\");\r\n    const [id, setId] = useState(\"\");\r\n    const [events, setEvent] = useState<Array<IEvent>>([]);\r\n\r\n    useEffect(() => {\r\n       getEvents();\r\n    }, []);\r\n\r\n    function handleShow() {\r\n        setShow(true);\r\n    }\r\n\r\n    function getEvents() {\r\n        db.getEvent().then((docs : any) => {\r\n            let allEvents = docs.map((item : any) => ({\r\n                id: item._id,\r\n                title: item.note,\r\n                start: item.date,\r\n                end: item.end,\r\n            }));\r\n            setEvent(allEvents);\r\n        });\r\n    }\r\n\r\n    function handleEditModalShow(event : IEvent) {\r\n        setId(event.id);\r\n        setNote(event.title);\r\n        setDate(event.start);\r\n        setShow(true);\r\n    }\r\n    \r\n    function handleClose() {\r\n        handleReset();\r\n        setShow(false);\r\n    }\r\n\r\n    function handleReset() {\r\n        setId(\"\");\r\n        setNote(\"\");;\r\n        setDate(defaultDate);\r\n    }\r\n\r\n    function handleDatePick(event : any) {\r\n        setDate(event.target.value);\r\n    }\r\n\r\n    function handleNoteSet(event : any) {\r\n        setNote(event.target.value);\r\n    }\r\n    \r\n    function handleEventSave() {\r\n       if (id === null || id === \"\") {\r\n            handleCreate();\r\n       }\r\n       else {\r\n            handleEdit();\r\n       }\r\n    }\r\n\r\n    function handleDelete() {\r\n        db.deleteEvent(id).then(() => {\r\n            handleClose();\r\n            getEvents();\r\n        })\r\n    }\r\n\r\n    function handleCreate() {\r\n        db.createEvent({ date, note }).then((result : IEventDb) => {\r\n            let allEvents = [...events];\r\n            let event : IEvent = { \r\n                id: result._id,\r\n                title: result.note,\r\n                start: result.date,\r\n                end: result.date,\r\n            }\r\n            allEvents.push(event);\r\n            setEvent(allEvents);\r\n            handleClose();\r\n        });\r\n    }\r\n     \r\n    function handleEdit() {\r\n        db.editEvent(id, { date, note }).then((result : IEventDb) => {\r\n            let allEvents = [...events];\r\n            let event : IEvent = { \r\n                id: id,\r\n                title: note,\r\n                start: date,\r\n                end: date,\r\n            }\r\n            let index = allEvents.findIndex(x => x.id == id);\r\n            allEvents[index] = event;\r\n            setEvent(allEvents);\r\n            handleClose();\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <EventContext.Provider value={{\r\n                show, \r\n                date, \r\n                note,\r\n                events,\r\n                onShow: handleShow, \r\n                onClose: handleClose,\r\n                onDatePick: handleDatePick, \r\n                onNoteSet: handleNoteSet,\r\n                onEventSave: handleEventSave,\r\n                onEdit: handleEditModalShow,\r\n                onDelete: handleDelete,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </EventContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { EventContext } from '../Context/EventContext';\r\nimport { Modal, Button, FormControl, Form } from 'react-bootstrap';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./EventModal.scss\";\r\n\r\nexport function EventModal() {\r\n    const context = useContext(EventContext);\r\n    const { show, date, note, onClose, onDatePick, onNoteSet, onEventSave, onDelete } = context;\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                    Add an event\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Date:\r\n                        </Form.Label>\r\n                        <FormControl id=\"date\" type=\"date\" \r\n                            value={date} \r\n                            onChange={onDatePick}\r\n                        />\r\n\r\n                        <br />\r\n                        <Form.Label>\r\n                            Note:\r\n                        </Form.Label >\r\n                        <FormControl id=\"note\" type=\"text\" \r\n                            onChange={onNoteSet}\r\n                            value={note}\r\n                            as=\"textarea\"\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"danger\" className=\"mr-auto\" onClick={onDelete}>\r\n                    Delete\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={() => onEventSave(\"hello\")}>\r\n                    Save\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import React, { useContext } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin  from '@fullcalendar/list';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { EventModal } from './EventModal/EventModal';\nimport { IEvent, EventContext } from './Context/EventContext';\nimport './App.scss';\n\nfunction App() {\n  const context = useContext(EventContext);\n  const { onShow, onEdit, events } = context;\n\n  function handleShow() {\n    onShow();\n  }\n\n  function handleEditModal(event : any) {\n    let data : IEvent = {\n      id: event.id,\n      title: event.title,\n      start: (event.start).toISOString().substring(0, 10),\n      end: event.end\n    }\n    onEdit(data);\n  }\n\n  return (\n      <div className=\"App\">\n        <FullCalendar \n          defaultView=\"listWeek\" \n          header={{\n            center: 'addEventButton',\n          }}\n          plugins={[ interactionPlugin, listPlugin  ]}\n          selectable={true}\n          customButtons={ \n            {\n              addEventButton: {\n                text: 'Add Event',\n                click: handleShow,\n              }\n            }\n          }\n          \n          events={events}\n          dateClick={(info) => {\n            alert(info.dateStr);\n          }}\n          eventClick={(info) => {\n            handleEditModal(info.event);\n          }}\n          eventColor='#E79B25'\n        />\n        <EventModal />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { EventProvider } from './Context/EventContext';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <EventProvider>\n        <App />\n      </EventProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}